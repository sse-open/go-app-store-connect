// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	inapps "github.com/sse-open/go-app-store-connect/appstoreserver/resource/inapps"
	mock "github.com/stretchr/testify/mock"

	response "github.com/sse-open/go-app-store-connect/client/response"
)

// IInAppsService is an autogenerated mock type for the IInAppsService type
type IInAppsService struct {
	mock.Mock
}

type IInAppsService_Expecter struct {
	mock *mock.Mock
}

func (_m *IInAppsService) EXPECT() *IInAppsService_Expecter {
	return &IInAppsService_Expecter{mock: &_m.Mock}
}

// GetTransactionInfo provides a mock function with given fields: ctx, transactionId
func (_m *IInAppsService) GetTransactionInfo(ctx context.Context, transactionId string) (*inapps.TransactionInfoResponse, *response.ClientResponse, error) {
	ret := _m.Called(ctx, transactionId)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionInfo")
	}

	var r0 *inapps.TransactionInfoResponse
	var r1 *response.ClientResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*inapps.TransactionInfoResponse, *response.ClientResponse, error)); ok {
		return rf(ctx, transactionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *inapps.TransactionInfoResponse); ok {
		r0 = rf(ctx, transactionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inapps.TransactionInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *response.ClientResponse); ok {
		r1 = rf(ctx, transactionId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*response.ClientResponse)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, transactionId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IInAppsService_GetTransactionInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionInfo'
type IInAppsService_GetTransactionInfo_Call struct {
	*mock.Call
}

// GetTransactionInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionId string
func (_e *IInAppsService_Expecter) GetTransactionInfo(ctx interface{}, transactionId interface{}) *IInAppsService_GetTransactionInfo_Call {
	return &IInAppsService_GetTransactionInfo_Call{Call: _e.mock.On("GetTransactionInfo", ctx, transactionId)}
}

func (_c *IInAppsService_GetTransactionInfo_Call) Run(run func(ctx context.Context, transactionId string)) *IInAppsService_GetTransactionInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *IInAppsService_GetTransactionInfo_Call) Return(_a0 *inapps.TransactionInfoResponse, _a1 *response.ClientResponse, _a2 error) *IInAppsService_GetTransactionInfo_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *IInAppsService_GetTransactionInfo_Call) RunAndReturn(run func(context.Context, string) (*inapps.TransactionInfoResponse, *response.ClientResponse, error)) *IInAppsService_GetTransactionInfo_Call {
	_c.Call.Return(run)
	return _c
}

// LookUpOrderID provides a mock function with given fields: ctx, orderID
func (_m *IInAppsService) LookUpOrderID(ctx context.Context, orderID string) (*inapps.OrderLookupResponse, *response.ClientResponse, error) {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for LookUpOrderID")
	}

	var r0 *inapps.OrderLookupResponse
	var r1 *response.ClientResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*inapps.OrderLookupResponse, *response.ClientResponse, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *inapps.OrderLookupResponse); ok {
		r0 = rf(ctx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inapps.OrderLookupResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *response.ClientResponse); ok {
		r1 = rf(ctx, orderID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*response.ClientResponse)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, orderID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IInAppsService_LookUpOrderID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookUpOrderID'
type IInAppsService_LookUpOrderID_Call struct {
	*mock.Call
}

// LookUpOrderID is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID string
func (_e *IInAppsService_Expecter) LookUpOrderID(ctx interface{}, orderID interface{}) *IInAppsService_LookUpOrderID_Call {
	return &IInAppsService_LookUpOrderID_Call{Call: _e.mock.On("LookUpOrderID", ctx, orderID)}
}

func (_c *IInAppsService_LookUpOrderID_Call) Run(run func(ctx context.Context, orderID string)) *IInAppsService_LookUpOrderID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *IInAppsService_LookUpOrderID_Call) Return(_a0 *inapps.OrderLookupResponse, _a1 *response.ClientResponse, _a2 error) *IInAppsService_LookUpOrderID_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *IInAppsService_LookUpOrderID_Call) RunAndReturn(run func(context.Context, string) (*inapps.OrderLookupResponse, *response.ClientResponse, error)) *IInAppsService_LookUpOrderID_Call {
	_c.Call.Return(run)
	return _c
}

// NewIInAppsService creates a new instance of IInAppsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIInAppsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IInAppsService {
	mock := &IInAppsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
