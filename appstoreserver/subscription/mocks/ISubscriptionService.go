// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	resourcesubscription "github.com/sse-open/go-app-store-connect/appstoreserver/resource/subscription"
	response "github.com/sse-open/go-app-store-connect/client/response"
	mock "github.com/stretchr/testify/mock"

	subscription "github.com/sse-open/go-app-store-connect/appstoreserver/subscription"
)

// ISubscriptionService is an autogenerated mock type for the ISubscriptionService type
type ISubscriptionService struct {
	mock.Mock
}

type ISubscriptionService_Expecter struct {
	mock *mock.Mock
}

func (_m *ISubscriptionService) EXPECT() *ISubscriptionService_Expecter {
	return &ISubscriptionService_Expecter{mock: &_m.Mock}
}

// GetSubscriptionStatus provides a mock function with given fields: ctx, transactionId, queryParams
func (_m *ISubscriptionService) GetSubscriptionStatus(ctx context.Context, transactionId string, queryParams *subscription.GetSubscriptionStatusQuery) (*resourcesubscription.StatusResponse, *response.ClientResponse, error) {
	ret := _m.Called(ctx, transactionId, queryParams)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscriptionStatus")
	}

	var r0 *resourcesubscription.StatusResponse
	var r1 *response.ClientResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *subscription.GetSubscriptionStatusQuery) (*resourcesubscription.StatusResponse, *response.ClientResponse, error)); ok {
		return rf(ctx, transactionId, queryParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *subscription.GetSubscriptionStatusQuery) *resourcesubscription.StatusResponse); ok {
		r0 = rf(ctx, transactionId, queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcesubscription.StatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *subscription.GetSubscriptionStatusQuery) *response.ClientResponse); ok {
		r1 = rf(ctx, transactionId, queryParams)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*response.ClientResponse)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *subscription.GetSubscriptionStatusQuery) error); ok {
		r2 = rf(ctx, transactionId, queryParams)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ISubscriptionService_GetSubscriptionStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubscriptionStatus'
type ISubscriptionService_GetSubscriptionStatus_Call struct {
	*mock.Call
}

// GetSubscriptionStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionId string
//   - queryParams *subscription.GetSubscriptionStatusQuery
func (_e *ISubscriptionService_Expecter) GetSubscriptionStatus(ctx interface{}, transactionId interface{}, queryParams interface{}) *ISubscriptionService_GetSubscriptionStatus_Call {
	return &ISubscriptionService_GetSubscriptionStatus_Call{Call: _e.mock.On("GetSubscriptionStatus", ctx, transactionId, queryParams)}
}

func (_c *ISubscriptionService_GetSubscriptionStatus_Call) Run(run func(ctx context.Context, transactionId string, queryParams *subscription.GetSubscriptionStatusQuery)) *ISubscriptionService_GetSubscriptionStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*subscription.GetSubscriptionStatusQuery))
	})
	return _c
}

func (_c *ISubscriptionService_GetSubscriptionStatus_Call) Return(_a0 *resourcesubscription.StatusResponse, _a1 *response.ClientResponse, _a2 error) *ISubscriptionService_GetSubscriptionStatus_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ISubscriptionService_GetSubscriptionStatus_Call) RunAndReturn(run func(context.Context, string, *subscription.GetSubscriptionStatusQuery) (*resourcesubscription.StatusResponse, *response.ClientResponse, error)) *ISubscriptionService_GetSubscriptionStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewISubscriptionService creates a new instance of ISubscriptionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISubscriptionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISubscriptionService {
	mock := &ISubscriptionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
