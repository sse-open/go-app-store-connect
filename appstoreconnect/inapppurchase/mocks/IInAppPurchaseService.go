// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	inapppurchase "github.com/sse-open/go-app-store-connect/appstoreconnect/inapppurchase"
	mock "github.com/stretchr/testify/mock"

	response "github.com/sse-open/go-app-store-connect/client/response"
)

// IInAppPurchaseService is an autogenerated mock type for the IInAppPurchaseService type
type IInAppPurchaseService struct {
	mock.Mock
}

type IInAppPurchaseService_Expecter struct {
	mock *mock.Mock
}

func (_m *IInAppPurchaseService) EXPECT() *IInAppPurchaseService_Expecter {
	return &IInAppPurchaseService_Expecter{mock: &_m.Mock}
}

// ListAppInAppPurchases provides a mock function with given fields: ctx, appID, queryParams
func (_m *IInAppPurchaseService) ListAppInAppPurchases(ctx context.Context, appID string, queryParams *inapppurchase.ListAppInAppPurchasesQuery) (*inapppurchase.InAppPurchasesV2Response, *response.ClientResponse, error) {
	ret := _m.Called(ctx, appID, queryParams)

	if len(ret) == 0 {
		panic("no return value specified for ListAppInAppPurchases")
	}

	var r0 *inapppurchase.InAppPurchasesV2Response
	var r1 *response.ClientResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *inapppurchase.ListAppInAppPurchasesQuery) (*inapppurchase.InAppPurchasesV2Response, *response.ClientResponse, error)); ok {
		return rf(ctx, appID, queryParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *inapppurchase.ListAppInAppPurchasesQuery) *inapppurchase.InAppPurchasesV2Response); ok {
		r0 = rf(ctx, appID, queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inapppurchase.InAppPurchasesV2Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *inapppurchase.ListAppInAppPurchasesQuery) *response.ClientResponse); ok {
		r1 = rf(ctx, appID, queryParams)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*response.ClientResponse)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *inapppurchase.ListAppInAppPurchasesQuery) error); ok {
		r2 = rf(ctx, appID, queryParams)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IInAppPurchaseService_ListAppInAppPurchases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAppInAppPurchases'
type IInAppPurchaseService_ListAppInAppPurchases_Call struct {
	*mock.Call
}

// ListAppInAppPurchases is a helper method to define mock.On call
//   - ctx context.Context
//   - appID string
//   - queryParams *inapppurchase.ListAppInAppPurchasesQuery
func (_e *IInAppPurchaseService_Expecter) ListAppInAppPurchases(ctx interface{}, appID interface{}, queryParams interface{}) *IInAppPurchaseService_ListAppInAppPurchases_Call {
	return &IInAppPurchaseService_ListAppInAppPurchases_Call{Call: _e.mock.On("ListAppInAppPurchases", ctx, appID, queryParams)}
}

func (_c *IInAppPurchaseService_ListAppInAppPurchases_Call) Run(run func(ctx context.Context, appID string, queryParams *inapppurchase.ListAppInAppPurchasesQuery)) *IInAppPurchaseService_ListAppInAppPurchases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*inapppurchase.ListAppInAppPurchasesQuery))
	})
	return _c
}

func (_c *IInAppPurchaseService_ListAppInAppPurchases_Call) Return(_a0 *inapppurchase.InAppPurchasesV2Response, _a1 *response.ClientResponse, _a2 error) *IInAppPurchaseService_ListAppInAppPurchases_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *IInAppPurchaseService_ListAppInAppPurchases_Call) RunAndReturn(run func(context.Context, string, *inapppurchase.ListAppInAppPurchasesQuery) (*inapppurchase.InAppPurchasesV2Response, *response.ClientResponse, error)) *IInAppPurchaseService_ListAppInAppPurchases_Call {
	_c.Call.Return(run)
	return _c
}

// ListInAppPurchaseAutomaticPrices provides a mock function with given fields: ctx, inAppPurchaseID, queryParams
func (_m *IInAppPurchaseService) ListInAppPurchaseAutomaticPrices(ctx context.Context, inAppPurchaseID string, queryParams *inapppurchase.ListInAppPurchaseAutomaticPricesQuery) (*inapppurchase.InAppPurchasePricesResponse, *response.ClientResponse, error) {
	ret := _m.Called(ctx, inAppPurchaseID, queryParams)

	if len(ret) == 0 {
		panic("no return value specified for ListInAppPurchaseAutomaticPrices")
	}

	var r0 *inapppurchase.InAppPurchasePricesResponse
	var r1 *response.ClientResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *inapppurchase.ListInAppPurchaseAutomaticPricesQuery) (*inapppurchase.InAppPurchasePricesResponse, *response.ClientResponse, error)); ok {
		return rf(ctx, inAppPurchaseID, queryParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *inapppurchase.ListInAppPurchaseAutomaticPricesQuery) *inapppurchase.InAppPurchasePricesResponse); ok {
		r0 = rf(ctx, inAppPurchaseID, queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inapppurchase.InAppPurchasePricesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *inapppurchase.ListInAppPurchaseAutomaticPricesQuery) *response.ClientResponse); ok {
		r1 = rf(ctx, inAppPurchaseID, queryParams)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*response.ClientResponse)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *inapppurchase.ListInAppPurchaseAutomaticPricesQuery) error); ok {
		r2 = rf(ctx, inAppPurchaseID, queryParams)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IInAppPurchaseService_ListInAppPurchaseAutomaticPrices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInAppPurchaseAutomaticPrices'
type IInAppPurchaseService_ListInAppPurchaseAutomaticPrices_Call struct {
	*mock.Call
}

// ListInAppPurchaseAutomaticPrices is a helper method to define mock.On call
//   - ctx context.Context
//   - inAppPurchaseID string
//   - queryParams *inapppurchase.ListInAppPurchaseAutomaticPricesQuery
func (_e *IInAppPurchaseService_Expecter) ListInAppPurchaseAutomaticPrices(ctx interface{}, inAppPurchaseID interface{}, queryParams interface{}) *IInAppPurchaseService_ListInAppPurchaseAutomaticPrices_Call {
	return &IInAppPurchaseService_ListInAppPurchaseAutomaticPrices_Call{Call: _e.mock.On("ListInAppPurchaseAutomaticPrices", ctx, inAppPurchaseID, queryParams)}
}

func (_c *IInAppPurchaseService_ListInAppPurchaseAutomaticPrices_Call) Run(run func(ctx context.Context, inAppPurchaseID string, queryParams *inapppurchase.ListInAppPurchaseAutomaticPricesQuery)) *IInAppPurchaseService_ListInAppPurchaseAutomaticPrices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*inapppurchase.ListInAppPurchaseAutomaticPricesQuery))
	})
	return _c
}

func (_c *IInAppPurchaseService_ListInAppPurchaseAutomaticPrices_Call) Return(_a0 *inapppurchase.InAppPurchasePricesResponse, _a1 *response.ClientResponse, _a2 error) *IInAppPurchaseService_ListInAppPurchaseAutomaticPrices_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *IInAppPurchaseService_ListInAppPurchaseAutomaticPrices_Call) RunAndReturn(run func(context.Context, string, *inapppurchase.ListInAppPurchaseAutomaticPricesQuery) (*inapppurchase.InAppPurchasePricesResponse, *response.ClientResponse, error)) *IInAppPurchaseService_ListInAppPurchaseAutomaticPrices_Call {
	_c.Call.Return(run)
	return _c
}

// ListInAppPurchaseManualPrices provides a mock function with given fields: ctx, inAppPurchaseID, queryParams
func (_m *IInAppPurchaseService) ListInAppPurchaseManualPrices(ctx context.Context, inAppPurchaseID string, queryParams *inapppurchase.ListInAppPurchaseManualPricesQuery) (*inapppurchase.InAppPurchasePricesResponse, *response.ClientResponse, error) {
	ret := _m.Called(ctx, inAppPurchaseID, queryParams)

	if len(ret) == 0 {
		panic("no return value specified for ListInAppPurchaseManualPrices")
	}

	var r0 *inapppurchase.InAppPurchasePricesResponse
	var r1 *response.ClientResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *inapppurchase.ListInAppPurchaseManualPricesQuery) (*inapppurchase.InAppPurchasePricesResponse, *response.ClientResponse, error)); ok {
		return rf(ctx, inAppPurchaseID, queryParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *inapppurchase.ListInAppPurchaseManualPricesQuery) *inapppurchase.InAppPurchasePricesResponse); ok {
		r0 = rf(ctx, inAppPurchaseID, queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inapppurchase.InAppPurchasePricesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *inapppurchase.ListInAppPurchaseManualPricesQuery) *response.ClientResponse); ok {
		r1 = rf(ctx, inAppPurchaseID, queryParams)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*response.ClientResponse)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *inapppurchase.ListInAppPurchaseManualPricesQuery) error); ok {
		r2 = rf(ctx, inAppPurchaseID, queryParams)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IInAppPurchaseService_ListInAppPurchaseManualPrices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInAppPurchaseManualPrices'
type IInAppPurchaseService_ListInAppPurchaseManualPrices_Call struct {
	*mock.Call
}

// ListInAppPurchaseManualPrices is a helper method to define mock.On call
//   - ctx context.Context
//   - inAppPurchaseID string
//   - queryParams *inapppurchase.ListInAppPurchaseManualPricesQuery
func (_e *IInAppPurchaseService_Expecter) ListInAppPurchaseManualPrices(ctx interface{}, inAppPurchaseID interface{}, queryParams interface{}) *IInAppPurchaseService_ListInAppPurchaseManualPrices_Call {
	return &IInAppPurchaseService_ListInAppPurchaseManualPrices_Call{Call: _e.mock.On("ListInAppPurchaseManualPrices", ctx, inAppPurchaseID, queryParams)}
}

func (_c *IInAppPurchaseService_ListInAppPurchaseManualPrices_Call) Run(run func(ctx context.Context, inAppPurchaseID string, queryParams *inapppurchase.ListInAppPurchaseManualPricesQuery)) *IInAppPurchaseService_ListInAppPurchaseManualPrices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*inapppurchase.ListInAppPurchaseManualPricesQuery))
	})
	return _c
}

func (_c *IInAppPurchaseService_ListInAppPurchaseManualPrices_Call) Return(_a0 *inapppurchase.InAppPurchasePricesResponse, _a1 *response.ClientResponse, _a2 error) *IInAppPurchaseService_ListInAppPurchaseManualPrices_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *IInAppPurchaseService_ListInAppPurchaseManualPrices_Call) RunAndReturn(run func(context.Context, string, *inapppurchase.ListInAppPurchaseManualPricesQuery) (*inapppurchase.InAppPurchasePricesResponse, *response.ClientResponse, error)) *IInAppPurchaseService_ListInAppPurchaseManualPrices_Call {
	_c.Call.Return(run)
	return _c
}

// NewIInAppPurchaseService creates a new instance of IInAppPurchaseService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIInAppPurchaseService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IInAppPurchaseService {
	mock := &IInAppPurchaseService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
