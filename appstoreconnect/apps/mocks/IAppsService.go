// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	apps "github.com/sse-open/go-app-store-connect/appstoreconnect/apps"

	mock "github.com/stretchr/testify/mock"

	response "github.com/sse-open/go-app-store-connect/client/response"
)

// IAppsService is an autogenerated mock type for the IAppsService type
type IAppsService struct {
	mock.Mock
}

type IAppsService_Expecter struct {
	mock *mock.Mock
}

func (_m *IAppsService) EXPECT() *IAppsService_Expecter {
	return &IAppsService_Expecter{mock: &_m.Mock}
}

// ListApps provides a mock function with given fields: ctx, queryParams
func (_m *IAppsService) ListApps(ctx context.Context, queryParams *apps.ListAppsQuery) (*apps.AppsResponse, *response.ClientResponse, error) {
	ret := _m.Called(ctx, queryParams)

	if len(ret) == 0 {
		panic("no return value specified for ListApps")
	}

	var r0 *apps.AppsResponse
	var r1 *response.ClientResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *apps.ListAppsQuery) (*apps.AppsResponse, *response.ClientResponse, error)); ok {
		return rf(ctx, queryParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apps.ListAppsQuery) *apps.AppsResponse); ok {
		r0 = rf(ctx, queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apps.AppsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apps.ListAppsQuery) *response.ClientResponse); ok {
		r1 = rf(ctx, queryParams)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*response.ClientResponse)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *apps.ListAppsQuery) error); ok {
		r2 = rf(ctx, queryParams)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IAppsService_ListApps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListApps'
type IAppsService_ListApps_Call struct {
	*mock.Call
}

// ListApps is a helper method to define mock.On call
//   - ctx context.Context
//   - queryParams *apps.ListAppsQuery
func (_e *IAppsService_Expecter) ListApps(ctx interface{}, queryParams interface{}) *IAppsService_ListApps_Call {
	return &IAppsService_ListApps_Call{Call: _e.mock.On("ListApps", ctx, queryParams)}
}

func (_c *IAppsService_ListApps_Call) Run(run func(ctx context.Context, queryParams *apps.ListAppsQuery)) *IAppsService_ListApps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*apps.ListAppsQuery))
	})
	return _c
}

func (_c *IAppsService_ListApps_Call) Return(_a0 *apps.AppsResponse, _a1 *response.ClientResponse, _a2 error) *IAppsService_ListApps_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *IAppsService_ListApps_Call) RunAndReturn(run func(context.Context, *apps.ListAppsQuery) (*apps.AppsResponse, *response.ClientResponse, error)) *IAppsService_ListApps_Call {
	_c.Call.Return(run)
	return _c
}

// NewIAppsService creates a new instance of IAppsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAppsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAppsService {
	mock := &IAppsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
